# .gitignore


# Intellij IDE settings dir
.idea/


# MacOS
.DS_Store


# When using .gitkeep for dirs like /secrets/ the order of the two entires is important.
# This comes first: directory/*    Then this !directory/.gitkeep    Like this:
secrets/*
!secrets/.gitkeep
# Later, we may add instructions for some specific usage of the secrets dir:
#!secrets/about-secrets.txt


# datavolume and dbvolume
# Git will not add anything inside this directory except the .gitkeep file.
# You can use zero-byte .gitkeep files as the minimal way to keep an empty directory in git.
# These settings might be used if and when some docker containers are used.
# These directories would be for db/data persistence and data sharing across containers.
#datavolume/*
#!datavolume/.gitkeep
#dbvolume/*
#!dbvolume/.gitkeep


# Project notes and work in progress
# Directory to briefly hold working files inside the project but not add them to git.
# * Tell your IDE to exclude/ignore this directory to reduce indexing & inspection overhead.
# In IntelliJ IDEs, this is called "Mark as Excluded".
# This directory does not exist in the repository. You can optionally create it.
todo/


# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class


# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
pip-wheel-metadata/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST


# Installer logs
pip-log.txt
pip-delete-this-directory.txt


# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/


# Translations
*.mo
*.pot


# Jupyter Notebook
.ipynb_checkpoints


# IPython
profile_default/
ipython_config.py


# pyenv
# I choose to store the .python-version file in the repo and I include instructions for a pre-configure V.E. setup.
#.python-version


# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock


# PEP 582; used by e.g. github.com/David-OConnor/pyflow
__pypackages__/


# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/


# mkdocs documentation
/site


# mypy
.mypy_cache/
.dmypy.json
dmypy.json


# Pyre type checker
.pyre/

